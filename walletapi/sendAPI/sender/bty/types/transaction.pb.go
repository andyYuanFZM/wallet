// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transaction.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	transaction.proto

It has these top-level messages:
	Transaction
	Transactions
	Signature
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Transaction struct {
	Execer    []byte     `protobuf:"bytes,1,opt,name=execer,proto3" json:"execer,omitempty"`
	Payload   []byte     `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature *Signature `protobuf:"bytes,3,opt,name=signature" json:"signature,omitempty"`
	Fee       int64      `protobuf:"varint,4,opt,name=fee" json:"fee,omitempty"`
	Expire    int64      `protobuf:"varint,5,opt,name=expire" json:"expire,omitempty"`
	// 随机ID，可以防止payload 相同的时候，交易重复
	Nonce int64 `protobuf:"varint,6,opt,name=nonce" json:"nonce,omitempty"`
	// 对方地址，如果没有对方地址，可以为空
	To         string `protobuf:"bytes,7,opt,name=to" json:"to,omitempty"`
	GroupCount int32  `protobuf:"varint,8,opt,name=groupCount" json:"groupCount,omitempty"`
	Header     []byte `protobuf:"bytes,9,opt,name=header,proto3" json:"header,omitempty"`
	Next       []byte `protobuf:"bytes,10,opt,name=next,proto3" json:"next,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Transaction) GetExecer() []byte {
	if m != nil {
		return m.Execer
	}
	return nil
}

func (m *Transaction) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Transaction) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Transaction) GetFee() int64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *Transaction) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *Transaction) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Transaction) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Transaction) GetGroupCount() int32 {
	if m != nil {
		return m.GroupCount
	}
	return 0
}

func (m *Transaction) GetHeader() []byte {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Transaction) GetNext() []byte {
	if m != nil {
		return m.Next
	}
	return nil
}

type Transactions struct {
	Txs []*Transaction `protobuf:"bytes,1,rep,name=txs" json:"txs,omitempty"`
}

func (m *Transactions) Reset()                    { *m = Transactions{} }
func (m *Transactions) String() string            { return proto.CompactTextString(m) }
func (*Transactions) ProtoMessage()               {}
func (*Transactions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Transactions) GetTxs() []*Transaction {
	if m != nil {
		return m.Txs
	}
	return nil
}

// 对于一个交易组中的交易，要么全部成功，要么全部失败
// 这个要好好设计一下
// 最好交易构成一个链条[prevhash].独立的交易构成链条
// 只要这个组中有一个执行是出错的，那么就执行不成功
// 三种签名支持
// ty = 1 -> secp256k1
// ty = 2 -> ed25519
// ty = 3 -> sm2
// ty = 4 -> OnetimeED25519
// ty = 5 -> RingBaseonED25519
type Signature struct {
	Ty     int32  `protobuf:"varint,1,opt,name=ty" json:"ty,omitempty"`
	Pubkey []byte `protobuf:"bytes,2,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	// 当ty为5时，格式应该用RingSignature去解析
	Signature []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Signature) Reset()                    { *m = Signature{} }
func (m *Signature) String() string            { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()               {}
func (*Signature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Signature) GetTy() int32 {
	if m != nil {
		return m.Ty
	}
	return 0
}

func (m *Signature) GetPubkey() []byte {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*Transaction)(nil), "types.Transaction")
	proto.RegisterType((*Transactions)(nil), "types.Transactions")
	proto.RegisterType((*Signature)(nil), "types.Signature")
}

func init() { proto.RegisterFile("transaction.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x51, 0x4e, 0xc3, 0x30,
	0x0c, 0x86, 0x95, 0x76, 0xdd, 0xa8, 0x37, 0xa1, 0x61, 0x21, 0xe4, 0x07, 0x84, 0xa2, 0x89, 0x87,
	0x3c, 0xf5, 0x61, 0x70, 0x03, 0x4e, 0x40, 0xe0, 0x02, 0xd9, 0x66, 0xc6, 0x04, 0x4a, 0xa2, 0x34,
	0x95, 0xda, 0x33, 0x70, 0x69, 0xd4, 0xb4, 0x63, 0x15, 0x6f, 0xfe, 0x7e, 0x5b, 0x76, 0xfe, 0x3f,
	0x70, 0x13, 0x83, 0xb1, 0xb5, 0xd9, 0xc7, 0x93, 0xb3, 0x95, 0x0f, 0x2e, 0x3a, 0x2c, 0x62, 0xe7,
	0xb9, 0xde, 0xfc, 0x64, 0xb0, 0x7c, 0xbf, 0x34, 0xf1, 0x0e, 0xe6, 0xdc, 0xf2, 0x9e, 0x03, 0x09,
	0x29, 0xd4, 0x4a, 0x8f, 0x84, 0x04, 0x0b, 0x6f, 0xba, 0x6f, 0x67, 0x0e, 0x94, 0xa5, 0xc6, 0x19,
	0xb1, 0x82, 0xb2, 0x3e, 0x1d, 0xad, 0x89, 0x4d, 0x60, 0xca, 0xa5, 0x50, 0xcb, 0xed, 0xba, 0x4a,
	0xcb, 0xab, 0xb7, 0xb3, 0xae, 0x2f, 0x23, 0xb8, 0x86, 0xfc, 0x83, 0x99, 0x66, 0x52, 0xa8, 0x5c,
	0xf7, 0xe5, 0x70, 0xd3, 0x9f, 0x02, 0x53, 0x91, 0xc4, 0x91, 0xf0, 0x16, 0x0a, 0xeb, 0xec, 0x9e,
	0x69, 0x9e, 0xe4, 0x01, 0xf0, 0x1a, 0xb2, 0xe8, 0x68, 0x21, 0x85, 0x2a, 0x75, 0x16, 0x1d, 0x3e,
	0x00, 0x1c, 0x83, 0x6b, 0xfc, 0x8b, 0x6b, 0x6c, 0xa4, 0x2b, 0x29, 0x54, 0xa1, 0x27, 0x4a, 0xbf,
	0xfd, 0x93, 0xcd, 0x81, 0x03, 0x95, 0x83, 0xa3, 0x81, 0x10, 0x61, 0x66, 0xb9, 0x8d, 0x04, 0x49,
	0x4d, 0xf5, 0xe6, 0x19, 0x56, 0x93, 0x30, 0x6a, 0x7c, 0x84, 0x3c, 0xb6, 0x35, 0x09, 0x99, 0xab,
	0xe5, 0x16, 0x47, 0x57, 0x93, 0x09, 0xdd, 0xb7, 0x37, 0xaf, 0x50, 0xfe, 0x39, 0x4d, 0xcf, 0xeb,
	0x52, 0x78, 0x85, 0xce, 0x62, 0xd7, 0x9f, 0xf7, 0xcd, 0xee, 0x8b, 0xbb, 0x31, 0xb7, 0x91, 0xf0,
	0xfe, 0x7f, 0x6c, 0xab, 0x49, 0x48, 0xbb, 0x79, 0xfa, 0xa4, 0xa7, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x5f, 0xdf, 0xf5, 0x7d, 0xb9, 0x01, 0x00, 0x00,
}
